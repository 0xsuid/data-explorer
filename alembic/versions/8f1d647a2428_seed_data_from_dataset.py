"""seed data from Dataset

Revision ID: 8f1d647a2428
Revises: 4ae9aee8d357
Create Date: 2025-01-07 01:38:28.870435

"""
from typing import Sequence, Union

import re
from alembic import op
from sqlalchemy.orm import Session
import pandas as pd
from pathlib import Path

from api.models import ChemicalData


# revision identifiers, used by Alembic.
revision: str = '8f1d647a2428'
down_revision: Union[str, None] = '4ae9aee8d357'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

current_dir = Path(__file__).parent.resolve()
dataset_file = current_dir.parent / "seeder" / "TestData.csv"

def extract_number(value: str) -> int:
    """
    Extracts the first integer from a string.
    Example: "3 | Poor | The main product" -> 3
    """
    match = re.match(r"(\d+)\s\|", value)
    return int(match.group(1)) if match else None


def extract_unit(s):
    # Regular expression to match weight and volume units (kg, g, L, mL)
    weight_and_volume_units = r'\b(kg|g|L|mL)\b'
    
    # Use re.search to find the first match
    match = re.search(weight_and_volume_units, s)
    
    # If a match is found, return the unit; otherwise, return None
    if match:
        return match.group(0)
    return None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Start a session
    bind = op.get_bind()
    session = Session(bind=bind)

    # Read the CSV file
    df = pd.read_csv(dataset_file, encoding='ISO-8859-1')

    # Rename columns to match the model's attributes
    df = df.rename(columns={
        'internalUUID': 'internal_uuid',
        'flowName': 'flow_name',
        'CAS': 'cas',
        'processName': 'process_name',
        'country': 'country',
        'ISOTwoLetterCountryCode': 'iso_country_code',
        'processDescription': 'process_description',
        'bioCarbonContent': 'bio_carbon_content',
        'carbonContent': 'carbon_content',
        'allocationType': 'allocation_type',
        'declaredUnit': 'declared_unit',
        'referencePeriod': 'reference_period',
        'TechRep': 'tech_rep',
        'TimeRep': 'time_rep',
        'GeoRep': 'geo_rep',
        'Completeness': 'completeness',
        'Reliability': 'reliability',
        'MethodConsistency': 'method_consistency',
        'OverallQuality': 'overall_quality',
        'TechRep_TfS': 'tech_rep_tfs',
        'TimeRep_TfS': 'time_rep_tfs',
        'GeoRep_TfS': 'geo_rep_tfs',
        'Completeness_TfS': 'completeness_tfs',
        'Reliability_TfS': 'reliability_tfs',
        'OverallQuality_TfS': 'overall_quality_tfs',
        'DQRShort_TfS': 'dqr_short_tfs',
        'PDS_TfS': 'pds_tfs',
        'Carbon Minds ISO 14067 (based on IPCC 2021) - climate change - global warming potential (GWP100) [kg CO2-Eq]': 'gwp_climate_change',
        'Carbon Minds ISO 14067 (based on IPCC 2021) - climate change: biogenic emissions - global warming potential (GWP100) [kg CO2-Eq]': 'gwp_biogenic_emissions',
        'Carbon Minds ISO 14067 (based on IPCC 2021) - climate change: biogenic removal - global warming potential (GWP100) [kg CO2-Eq]': 'gwp_biogenic_removal',
        'Carbon Minds ISO 14067 (based on IPCC 2021) - climate change: fossil - global warming potential (GWP100) [kg CO2-Eq]': 'gwp_fossil',
        'Carbon Minds ISO 14067 (based on IPCC 2021) - climate change: land use - global warming potential (GWP100) [kg CO2-Eq]': 'gwp_land_use'
    })

    # Convert DataFrame rows into a list of ChemicalData instances
    chemical_data_records = [
        ChemicalData(
            internal_uuid=row['internal_uuid'],
            flow_name=row['flow_name'],
            cas=row['cas'],
            process_name=row['process_name'],
            country=row['country'],
            iso_country_code=row['iso_country_code'],
            type=row['type'],
            process_description=row.get('process_description'),
            bio_carbon_content=row['bio_carbon_content'],
            carbon_content=row['carbon_content'],
            allocation_type=row['allocation_type'],
            declared_unit=extract_unit(row['declared_unit']),
            reference_period=row['reference_period'],
            tech_rep=extract_number(row.get('tech_rep')),
            time_rep=extract_number(row.get('time_rep')),
            geo_rep=extract_number(row.get('geo_rep')),
            completeness=extract_number(row.get('completeness')),
            reliability=extract_number(row.get('reliability')),
            method_consistency=extract_number(row.get('method_consistency')),
            overall_quality=extract_number(row.get('overall_quality')),
            tech_rep_tfs=extract_number(row.get('tech_rep_tfs')),
            time_rep_tfs=extract_number(row.get('time_rep_tfs')),
            geo_rep_tfs=extract_number(row.get('geo_rep_tfs')),
            completeness_tfs=extract_number(row.get('completeness_tfs')),
            reliability_tfs=extract_number(row.get('reliability_tfs')),
            overall_quality_tfs=extract_number(row.get('overall_quality_tfs')),
            dqr_short_tfs=row['dqr_short_tfs'],
            pds_tfs=row.get('pds_tfs'),
            gwp_climate_change=row['gwp_climate_change'],
            gwp_biogenic_emissions=row['gwp_biogenic_emissions'],
            gwp_biogenic_removal=row['gwp_biogenic_removal'],
            gwp_fossil=row['gwp_fossil'],
            gwp_land_use=row['gwp_land_use']
        )
        for _, row in df.iterrows()
    ]

    # Add the records to the session
    session.bulk_save_objects(chemical_data_records)

    # Commit the session
    session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    session.query(ChemicalData).delete()
    session.commit()
    # ### end Alembic commands ###
